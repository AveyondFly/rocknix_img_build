name: Create Release with Image

on:
  schedule:
    - cron: '0 1 * * *'  # 每天凌晨 2 点 UTC = 北京时间上午 10 点
  create:
    tags:
      - 'v*'


jobs:
  build-and-release:
    runs-on: ubuntu-latest
    steps:
      - name: Check latest H700 version
        run: |
          latest_url=$(curl -s https://api.github.com/repos/ROCKNIX/distribution-nightly/releases \
            | jq -r '.[0].assets[].browser_download_url' \
            | grep 'H700' | grep 'img\.gz$' | head -n1)

          if [[ -z "$latest_url" ]]; then
            echo "❌ 无法获取最新 H700 镜像 URL"
            exit 1
          fi

          version=$(basename "$latest_url" | grep -oP '\d{8}')
          echo "📦 最新 H700 版本号: $version"

          # 若 .version 文件不存在则创建（首次构建）
          if [ ! -f .version ]; then
            echo "$version" > .version
          fi

          old_version=$(cat .version)

          if [ "$version" = "$old_version" ]; then
            echo "✅ 镜像版本未更新（$version），终止 Workflow。"
            exit 0
          fi

          echo "🔄 发现新版本: $version → 开始构建"
          echo "$version" > .version

          # 存入版本号用于后续用作上传路径
          echo "LATEST_VERSION=$version" >> $GITHUB_ENV
          
      - name: Checkout code
        uses: actions/checkout@v4  # 更新到最新版本

      # 安装依赖工具
      - name: Install xmlstarlet
        run: |
          sudo apt-get update
          sudo apt-get install -y xmlstarlet jq
      - name: Build the 3326 image 
        run: |
          chmod +x ./build_3326_common.sh
          sudo ./build_3326_common.sh mini
          
      - name: Build the h700 image
        run: |
          chmod +x ./build_h700_common.sh
          sudo ./build_h700_common.sh mini
          
      # - name: Build the 3566 image
      #   run: |
      #     chmod +x ./build_3566_common.sh 
      #     sudo ./build_3566_common.sh mini
      #     sudo ./build_3566_common.sh mini x55
      # 修正1：正确缩进 + 修复路径处理
      - name: Extract All Image Assets
        id: extract_assets
        run: |
          mapfile -t files < <(find . -type f -name '*.img.gz')
          if [ ${#files[@]} -eq 0 ]; then
            echo "❌ 未找到 .img.gz 镜像文件！"
            exit 1
          fi
          echo "共找到 ${#files[@]} 个镜像文件："
          for f in "${files[@]}"; do
            echo " - $f"
          done
          joined_files=$(printf "%s\n" "${files[@]}")
          echo "ASSET_PATHS<<EOF" >> $GITHUB_ENV
          echo "$joined_files" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
      # 修正2：使用现代release动作
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1  # 替代弃用的create-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          name: "Release ${{ github.ref }}"
          draft: false
          prerelease: false

      # 修正3：正确引用环境变量
      - name: Upload All Images as Release Assets
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ env.ASSET_PATHS }}
      # ⬇️ 安装 BaiduPCS-Go 工具
      - name: Install BaiduPCS-Go
        run: |
          curl -LO https://github.com/qjfoidnh/BaiduPCS-Go/releases/download/v3.9.7/BaiduPCS-Go-v3.9.7-linux-amd64.zip
          unzip BaiduPCS-Go-v3.9.7-linux-amd64.zip
          cd BaiduPCS-Go-v3.9.7-linux-amd64
          chmod +x BaiduPCS-Go
          mv BaiduPCS-Go /usr/local/bin/
      # 🔐 安全登录百度网盘（使用 GitHub Secret 中的 Cookie）
      - name: Login to BaiduPCS-Go
        run: |
          BaiduPCS-Go login -cookies="${{ secrets.BAIDU_COOKIE }}"
      # ☁️ 上传所有镜像文件到百度网盘指定路径
      - name: Upload All Images to Baidu Netdisk
        run: |
          echo "${{ env.ASSET_PATHS }}" > files.txt
          while IFS= read -r file; do
            if [ -f "$file" ]; then
              echo "📤 上传中: $file"
              BaiduPCS-Go upload "$file" "/lcdyk有的掌机/魔改包/rocknix自动构建/${{ env.LATEST_VERSION }}"
            else
              echo "⚠️ 文件不存在: $file"
            fi
          done < files.txt
